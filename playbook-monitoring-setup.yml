- name: Wait for initialization end
  hosts: all
  gather_facts: no
  remote_user: root

  tasks:
    - name: Wait for initialization has done
      command: cloud-init status --wait


- name: Install Cert bot for SSL
  hosts: all
  gather_facts: yes
  remote_user: root
  vars_files:
    - playbook-monitoring-setup-vars.yml

  tasks:
    - name: install PIP
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - python3
        - python3-venv
        - libaugeas0
        - nginx

    - name: Set up a virtual environment
      command: "python3 -m venv /opt/certbot/"

    - name: Set up a virtual environment
      command: "/opt/certbot/bin/pip install --upgrade pip"

    - name: Install Certbot on NGINX
      command: "/opt/certbot/bin/pip install certbot certbot-nginx"

    - name: Create a symlink to ensure Certbot runs
      file:
        src: /opt/certbot/bin/certbot
        dest: /usr/bin/certbot
        state: link

    - name: Create SSL certs for a specified domain
      command: certbot --nginx -d {{ domain_name }} --non-interactive --agree-tos -m {{ admin_email }}


- name: Install Docker on Ubuntu
  hosts: all
  gather_facts: yes
  remote_user: root

  tasks:
    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Install prerequisites
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - ca-certificates
        - curl
        - tree

    - name: Create directory /etc/apt/keyrings
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: 0755

    - name: Download Docker GPG key
      get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc

    - name: Set permissions for Docker GPG key
      file:
        path: /etc/apt/keyrings/docker.asc
        mode: a+r

    - name: Add Docker repository to Apt sources
      apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present

    - name: Update APT cache
      apt:
        update_cache: yes

    - name: Install Docker Engine
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - docker-ce
        - docker-compose

    - name: Ensure Docker service is started and enabled
      service:
        name: docker
        state: started
        enabled: yes


- name: Add Monirotinig user
  hosts: all
  gather_facts: no
  remote_user: root
  tasks:
    - name: Ensure group "monitoring" exists
      ansible.builtin.group:
        name: monitoring
        state: present

    - name: Add the user 'Monitoring'
      ansible.builtin.user:
        name: monitoring
        shell: /bin/bash
        groups: monitoring,sudo,docker
        append: yes

    - name: Create a .ssh directory if it does not exist
      ansible.builtin.file:
        path: /home/monitoring/.ssh/
        state: directory
        mode: '0700'
        owner: monitoring
        group: monitoring

    - name: Copy the authorized_keys
      command: "install -o monitoring -g monitoring -m 0700  /root/.ssh/authorized_keys /home/monitoring/.ssh/authorized_keys"


- name: Copy the folder with configurations
  hosts: all
  gather_facts: no
  remote_user: monitoring
  tasks:  
    - name: Copy the folder
      copy:
        src: ./monitoring_vm_files/
        dest: /home/monitoring/config/
        # owner: root
        # group: root
        # mode: "0777"
      tags:
        - movefiles 


- name: Run Prometheus, Grafana, Alarm Manager
  hosts: all
  gather_facts: no
  remote_user: monitoring
  tasks:  
    - name: Run docker-compose
      command: docker-compose -f /home/monitoring/config/docker/docker-compose.yml up -d


    # location ~ ^/prometheus/(.*) {
    #     proxy_pass http://0.0.0.0:9090/$1$is_args$args;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
    # location ~ ^/grafana/(.*) {
    #     proxy_pass http://0.0.0.0:3000/$1$is_args$args;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }



   # location / {
    #     proxy_pass http://0.0.0.0:3000/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     proxy_set_header Upgrade $http_upgrade;
    #     proxy_set_header Connection "Upgrade";
    # }

    #     location /prometheus/ {
    #     proxy_pass http://0.0.0.0:9090/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }

 